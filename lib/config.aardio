
//config 配置文件 
import fsys.config;
config  = fsys.config("/config/"); 


if(!config.proxy.mode) config.proxy.mode = "pac";
if(!config.proxy.pacPort) config.proxy.pacPort = 0;
if(config.proxy.useHttpGlobal === null){
	config.proxy.useHttpGlobal = true;
}
if(config.proxy.useSocksPac === null){
	config.proxy.useSocksPac = _WIN10_LATER;
}

if(config.proxy.enableGitConfigGithub === null){
	config.proxy.enableGitConfigGithub = true;
}

if(config.proxy.test === null){
	config.proxy.test = true;
}

if(config.settings.autoStartTest === null){
	config.settings.autoStartTest = true;
}


if(!config.proxy.testInterval){
	config.proxy.testInterval = 15;
}

if(!config.proxy.maxTestServers){
	config.proxy.maxTestServers = 100;
}

if(config.subscribe.autoRefreshSubscription === null){
	config.subscribe.autoRefreshSubscription = false;
}

if(!config.subscribe.subscribeUrls){
	config.subscribe.subscribeUrls = {
		fields =  {"";"checked";"ps";"url";}
	}
}

if(!config.proxy.hotkey){
	config.proxy.hotkey = {1/*_MOD_ALT*/|2/*_MOD_CONTROL*/|4/*_MOD_SHIFT*/;'P'#}
}

if(config.proxy.outbounds === null){
	config.proxy.outbounds = ..table.array();
}

config.__resetDefaultCore = function(){
	config.core.default =  {
    "inbounds":{
        {
            "listen":"0.0.0.0",
            "port":1081,
            "protocol":"socks",
            "tag":"proxy",
            "settings":{
                "auth":"noauth",
                "udp":true
            },
            "sniffing":{
                "destOverride":{
                    "http",
                    "tls"
                },
                "enabled":true
            }
        },
        {
            "listen":"0.0.0.0",
            "port":1082,
            "protocol":"http",
            "tag":"http_proxy",
            "settings":{

            },
            "sniffing":{
                "destOverride":{
                    "http",
                    "tls"
                },
                "enabled":true
            }
        },
        {
            "listen":"127.0.0.1",
            "port":1084,
            "protocol":"dokodemo-door",
            "tag":"api",
            "settings":{
                "address":"127.0.0.1",
                "allowTransparent":false,
                "udp":false
            }
        },
        {
            "listen":"0.0.0.0",
            "port":1091,
            "protocol":"socks",
            "tag":"proxySearcher",
            "settings":{
                "auth":"noauth",
                "udp":true
            },
            "sniffing":{
                "destOverride":{
                    "http",
                    "tls"
                },
                "enabled":true
            }
        },
        {
            "listen":"0.0.0.0",
            "port":1092,
            "protocol":"http",
            "tag":"http_proxySearcher",
            "settings":{

            },
            "sniffing":{
                "destOverride":{
                    "http",
                    "tls"
                },
                "enabled":true
            }
        }
    },
    "outbounds":{
        {
            "tag":"proxy"
        },
        {
            "protocol":"freedom",
            "tag":"direct",
            "settings":{

            }
        },
        {
            "protocol":"blackhole",
            "tag":"block",
            "settings":{
                "response":{
                    "type":"http"
                }
            }
        }
    },
    "api":{
        "services":{
            "HandlerService",
            "LoggerService",
            "StatsService"
        },
        "tag":"api"
    },
    "dns":{
        "servers":{
            "114.114.114.114",
            {
                "address":"1.1.1.1",
                "domains":{
                    "geosite:geolocation-!cn"
                },
                "port":53
            }
        }
    },
    "log":{
        "access":"",
        "error":"",
        "loglevel":"warning"
    },
    "policy":{
        "levels":{
            "0":{
                "statsUserDownlink":false,
                "statsUserUplink":false
            }
        },
        "system":{
            "statsInboundDownlink":false,
            "statsInboundUplink":false,
            "statsOutboundDownlink":true,
            "statsOutboundUplink":true
        }
    },
    "reverse":{

    },
    "routing":{
        "domainStrategy":"IPOnDemand",
        "rules":{
            {
                "inboundTag":{
                    "api"
                },
                "outboundTag":"api",
                "type":"field"
            }, 
                {
                "inboundTag":{
                    "proxySearcher",
                    "http_proxySearcher"
                },
                "outboundTag":"proxySearcher",
                "type":"field"
            },
            {
                "domain":{
                    "geosite:category-ads-all"
                },
                "outboundTag":"block",
                "port":"",
                "type":"field"
            },
            {
                "domain":{
                    "geosite:gfw"
                },
                "outboundTag":"proxy",
                "type":"field"
            },
            {
                "ip":{
                    "geoip:cn",
                    "geoip:private"
                },
                "outboundTag":"direct",
                "type":"field"
            },
            {
                "network":"udp,tcp",
                "outboundTag":"direct",
                "type":"field"
            }
        }
    },
    "stats":{

    }
}
}

if(!config.core.default){
	config.__resetDefaultCore();
}

// 将core配置的json页面隐藏掉，就不可能会有删除第二个入站的可能了，那么这里就可以注释掉了
if(!config.core.default.inbounds[2]){
	config.core.default.inbounds[2]	= {
		listen="127.0.0.1";
		port=0;
		protocol="http";
		settings={};
		sniffing={
			destOverride={
				"http";
				"tls"
			};
			enabled=true
		};
		tag="http_proxy"
	}
}
